/*
 * This file is generated by the gen-cont tool that is a part of the
 * FB_CONTAINERS package.
 */

#ifndef FB_CONTAINERS_SLIST_DOUBLE_H
#define FB_CONTAINERS_SLIST_DOUBLE_H

#include <stdlib.h>

typedef struct fb_containers_slist_node_DOUBLE SLIST_DOUBLE_NODE;

struct fb_containers_slist_node_DOUBLE
{
    double data;
    SLIST_DOUBLE_NODE* next;
};

typedef struct fb_containers_slist_DOUBLE
{
    SLIST_DOUBLE_NODE* first;
    SLIST_DOUBLE_NODE* last;
    size_t size;
} SLIST_DOUBLE;

SLIST_DOUBLE* SLIST_DOUBLE_alloc(void);
void SLIST_DOUBLE_free(SLIST_DOUBLE* slist);

SLIST_DOUBLE_NODE* SLIST_DOUBLE_push_front(SLIST_DOUBLE* slist, double data);
SLIST_DOUBLE_NODE* SLIST_DOUBLE_push_back(SLIST_DOUBLE* slist, double data);
double SLIST_DOUBLE_pop_front(SLIST_DOUBLE* slist);


static inline int SLIST_DOUBLE_empty(SLIST_DOUBLE* slist)
{ return !slist->first; }

static inline size_t SLIST_DOUBLE_size(SLIST_DOUBLE* slist)
{ return slist->size; }

static inline SLIST_DOUBLE_NODE* SLIST_DOUBLE_first(SLIST_DOUBLE* slist)
{ return slist->first; }

static inline SLIST_DOUBLE_NODE* SLIST_DOUBLE_next(SLIST_DOUBLE_NODE* node)
{ return node->next; }

static inline double SLIST_DOUBLE_get(SLIST_DOUBLE_NODE* node)
{ return node->data; }

static inline void SLIST_DOUBLE_set(SLIST_DOUBLE_NODE* node, double data)
{ node->data = data; }

#endif
